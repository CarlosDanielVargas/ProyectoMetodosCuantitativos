/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views;

import controllers.*;

/**
 *
 * @author cdvv
 */
public class DataFormPanel extends javax.swing.JPanel {

    private final GeneralController generalController;
    private final UIController uIController;
     
    /**
     * Creates new form DataFormPanel
     */
    public DataFormPanel() {
        this.generalController = GeneralController.getGeneralController();
        this.uIController = UIController.getUIController();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btSave = new javax.swing.JButton();
        lbExpectedDemand = new javax.swing.JLabel();
        lbUnitaryPrice = new javax.swing.JLabel();
        lbOrderingUnitaryCost = new javax.swing.JLabel();
        lbStoringUnitaryCost = new javax.swing.JLabel();
        tfExpectedDemand = new javax.swing.JTextField();
        tfUnitaryStoringCost = new javax.swing.JTextField();
        tfUnitaryPrice = new javax.swing.JTextField();
        tfOrderingCost = new javax.swing.JTextField();

        btSave.setText("Guardar datos");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        lbExpectedDemand.setText("Demanda esperada");
        lbExpectedDemand.setToolTipText("");

        lbUnitaryPrice.setText("Precio de la unidad");

        lbOrderingUnitaryCost.setText("Costo por ordenar");

        lbStoringUnitaryCost.setText("Costo de almacenaje unitario");

        tfExpectedDemand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfExpectedDemandKeyTyped(evt);
            }
        });

        tfUnitaryStoringCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfUnitaryStoringCostKeyTyped(evt);
            }
        });

        tfUnitaryPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfUnitaryPriceKeyTyped(evt);
            }
        });

        tfOrderingCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfOrderingCostKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbExpectedDemand)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfExpectedDemand))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbUnitaryPrice)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfUnitaryPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbOrderingUnitaryCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfOrderingCost, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbStoringUnitaryCost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfUnitaryStoringCost, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbExpectedDemand)
                    .addComponent(tfExpectedDemand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbUnitaryPrice)
                    .addComponent(tfUnitaryPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbOrderingUnitaryCost)
                    .addComponent(tfOrderingCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbStoringUnitaryCost)
                    .addComponent(tfUnitaryStoringCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );

        lbOrderingUnitaryCost.getAccessibleContext().setAccessibleName("Costo de orden");
    }// </editor-fold>//GEN-END:initComponents

    private void tfExpectedDemandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfExpectedDemandKeyTyped
        char c = evt.getKeyChar();
        if (!Character.isDigit(c)) {
            evt.consume();
        }
    }//GEN-LAST:event_tfExpectedDemandKeyTyped

    private void tfUnitaryPriceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfUnitaryPriceKeyTyped
        char c = evt.getKeyChar();
        String s = tfUnitaryPrice.getText();
        if (!Character.  isDigit(c) && (c != '.') || (s.contains(".") && (c == '.'))) {
            evt.consume();
        }
    }//GEN-LAST:event_tfUnitaryPriceKeyTyped

    private void tfOrderingCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfOrderingCostKeyTyped
        char c = evt.getKeyChar();
        String s = tfOrderingCost.getText();
        if (!Character.  isDigit(c) && (c != '.') || (s.contains(".") && (c == '.'))) {
            evt.consume();
        }
    }//GEN-LAST:event_tfOrderingCostKeyTyped

    private void tfUnitaryStoringCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfUnitaryStoringCostKeyTyped
        char c = evt.getKeyChar();
        String s = tfUnitaryStoringCost.getText();
        if (!Character.  isDigit(c) && (c != '.') || (s.contains(".") && (c == '.'))) {
            evt.consume();
        }
    }//GEN-LAST:event_tfUnitaryStoringCostKeyTyped

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        int expectedDemand = Integer.parseInt(tfExpectedDemand.getText());
        double unitaryPrice = Double.parseDouble(tfUnitaryPrice.getText());
        double orderingCost = Double.parseDouble(tfOrderingCost.getText());
        double storingCost = Double.parseDouble(tfUnitaryStoringCost.getText());
        generalController.createUserInventory(expectedDemand, unitaryPrice, orderingCost, storingCost);
        uIController.popUpMessage("Se han ingresado correctamente los datos", "Datos guardados", this.getParent());
    }//GEN-LAST:event_btSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSave;
    private javax.swing.JLabel lbExpectedDemand;
    private javax.swing.JLabel lbOrderingUnitaryCost;
    private javax.swing.JLabel lbStoringUnitaryCost;
    private javax.swing.JLabel lbUnitaryPrice;
    private javax.swing.JTextField tfExpectedDemand;
    private javax.swing.JTextField tfOrderingCost;
    private javax.swing.JTextField tfUnitaryPrice;
    private javax.swing.JTextField tfUnitaryStoringCost;
    // End of variables declaration//GEN-END:variables
}
